あなたは経験豊富なWebアプリケーション開発者です。ユーザーが商材を選択し、自分の部屋の画像に配置してシミュレーションできるブラウザベースのアプリケーションの完全なソースコード（HTML、CSS、JavaScript）を生成してください。すべての処理はクライアントサイドのJavaScriptで行い、サーバーサイドの機能は可能な限り使用しないでください。

### アプリケーションの画面フローと機能:

**1. 初期画面:**
    * ユーザーがサービスにアクセスした際に表示される最初の画面です。
    * **商材選択:**
        * 複数の商材（例: 家具、家電など）がリスト形式またはグリッド形式で表示され、ユーザーがその中から**1つだけ**を選択できるUIを実装してください。商材はダミー画像（例: `product1.png`, `product2.png` など）で表現し、適切なサイズで表示されるようにしてください。
        * 商材が選択されると、視覚的にそれが選択されたことを示すフィードバック（例: 枠線、背景色の変更など）を提供してください。
    * **ローカル画像選択:**
        * ユーザーが自身のローカルに保存されている画像ファイル（居室の全景画像を想定）を1枚選択できる入力UI（`<input type="file" accept="image/*">`など）を配置してください。
        * 画像が選択されたら、その画像のファイル名、または選択されたことを示すテキストなどを表示してください。
    * **次へ進むアクション:**
        * 商材とローカル画像の選択が完了した後に、次の画面へ進むためのボタン（例: 「配置画面へ」）を設置してください。

**2. 配置画面:**
    * 「次へ」ボタンが押された後に表示される画面です。
    * **キャンバス表示:**
        * ユーザーがローカルで選択した居室全景の画像を背景として表示し、これを「キャンバス」と見立ててください。キャンバスはブラウザウィンドウの大部分を占めるようにレイアウトしてください。
    * **商材画像の配置と操作:**
        * 初期画面で選択された商材の画像を、キャンバス（居室画像上）に表示してください。
        * **ドラッグ＆ドロップ/タッチ移動:**
            * 表示された商材画像を、マウスのドラッグ操作またはスマートフォンのタッチ操作（シングルフィンガーでのドラッグ）によって、キャンバス内の任意の場所に自由に移動できるようにしてください。
            * 商材画像をドラッグしている間は、画像が選択されていることを示す視覚的なフィードバック（例: 半透明化、枠線）を提供してください。
        * **拡大縮小（ズーム）:**
            * マウスのスクロールホイール操作、およびスマートフォンのピンチイン・ピンチアウト操作（マルチタッチ）によって、商材画像を拡大・縮小できるようにしてください。拡大縮小は元の縦横比を維持するようにしてください。
        * **回転:**
            * 商材画像を回転させるためのUI要素（例: ボタン、回転ハンドルなど）を提供してください。ユーザーがこのUIを操作することで、商材画像を任意の角度に回転できるようにしてください。回転の中心は商材画像の中央としてください。
            * 回転角度をリセットする機能もあると良いです。
    * **保存機能:**
        * キャンバス上に配置され、サイズ・回転が調整された商材画像を含む、結合された状態の居室画像を**1枚の画像ファイルとして**ユーザーのローカル環境に保存できるボタン（例: 「画像を保存」）を設置してください。
        * 保存される画像は、居室画像の上に商材画像が描画された、最終的な状態の画像としてください。

### 技術要件:
* すべての機能は純粋なJavaScript（ES6以降）、HTML5、CSS3を使用して実装してください。
* HTMLは意味的な構造を意識して記述してください。
* CSSは各要素のスタイリング、レイアウト、およびレスポンシブデザインに対応するように記述してください。
    * 異なる画面サイズ（デスクトップ、タブレット、スマートフォンなど）でレイアウトが適切に調整され、機能が損なわれないようにしてください。
* JavaScriptは、DOM操作、イベントハンドリング（`drag`, `touch`, `wheel`イベントなど）、Canvas API（画像結合のため）、およびFile API（ローカルファイルアクセス、画像保存のため）を適切に使用してください。
* ドラッグ＆ドロップ、ピンチズーム、回転操作はスムーズで直感的に行えるように実装してください。
* 商材のダミー画像は、JavaScriptで生成するか、またはコードに直接Base64エンコードされたデータURIとして埋め込んでください。外部リソースとして参照する必要はありません。
* ユーザーが選択したローカル画像は、クライアントサイドで読み込み、操作できるものとしてください。
* 保存機能では、最終的な画像をBlobとして生成し、ダウンロードリンクを提供することでユーザーに保存を促してください。

生成するコードは、読みやすく、コメントを適切に追加し、可能な限りモジュール化を意識してください。